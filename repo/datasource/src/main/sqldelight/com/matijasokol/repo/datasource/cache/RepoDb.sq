CREATE TABLE repoEntity(
    id INTEGER NOT NULL PRIMARY KEY,
    name TEXT NOT NULL,
    fullName TEXT NOT NULL,
    forks INTEGER NOT NULL,
    watchers INTEGER NOT NULL,
    open_issues INTEGER NOT NULL,
    stars INTEGER NOT NULL,
    updated_at TEXT NOT NULL,
    topics TEXT NOT NULL,
    language TEXT,
    url TEXT NOT NULL,
    description TEXT,
    author_id INTEGER NOT NULL,
    FOREIGN KEY (author_id) REFERENCES authorEntity(id)
    ON UPDATE NO ACTION ON DELETE CASCADE
);

CREATE TABLE authorEntity(
    id INTEGER NOT NULL PRIMARY KEY,
    image_url TEXT NOT NULL,
    name TEXT NOT NULL,
    profile_url TEXT NOT NULL,
    followers_url TEXT NOT NULL,
    repos_url TEXT NOT NULL,
    followers_count INTEGER DEFAULT NULL,
    repos_count INTEGER DEFAULT NULL
);

insertRepo:
INSERT OR REPLACE
INTO repoEntity (
    id,
    name,
    fullName,
    forks,
    watchers,
    open_issues,
    stars,
    updated_at,
    topics,
    language,
    url,
    description,
    author_id
) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);

insertAuthor:
INSERT OR REPLACE
INTO authorEntity(
    id,
    image_url,
    name,
    profile_url,
    followers_url,
    repos_url,
    followers_count,
    repos_count
) VALUES (?, ?, ?, ?, ?, ?, ?, ?);

getRepo:
SELECT * FROM repoEntity
WHERE id = :id;

getAllRepos:
SELECT * FROM repoEntity;

getAuthor:
SELECT * FROM authorEntity
WHERE id = :id;

removeAllAuthors:
DELETE FROM authorEntity;

updateFollowersCount:
UPDATE authorEntity
SET followers_count = :follower_count
WHERE id = :id;

updateReposCount:
UPDATE authorEntity
SET repos_count = :repos_count
WHERE id = :id;